// Code generated by "stringer -type=Type"; DO NOT EDIT.

package tokenizer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Error-0]
	_ = x[EOF-1]
	_ = x[Comment-2]
	_ = x[Of-3]
	_ = x[IntLit-4]
	_ = x[Identifier-5]
	_ = x[Var-6]
	_ = x[Array-7]
	_ = x[Constraint-8]
	_ = x[Predicate-9]
	_ = x[Solve-10]
	_ = x[Maximize-11]
	_ = x[Minimize-12]
	_ = x[BoolType-13]
	_ = x[IntType-14]
	_ = x[FloatType-15]
	_ = x[Set-16]
	_ = x[Range-17]
	_ = x[Colon-18]
	_ = x[SetStart-19]
	_ = x[SetEnd-20]
	_ = x[ArrayStart-21]
	_ = x[ArrayEnd-22]
	_ = x[TupleStart-23]
	_ = x[TupleEnd-24]
	_ = x[Comma-25]
	_ = x[AnnStart-26]
	_ = x[Assign-27]
	_ = x[BoolLit-28]
	_ = x[FloatLit-29]
	_ = x[StringLit-30]
	_ = x[Satisfy-31]
	_ = x[EOI-32]
}

const _Type_name = "ErrorEOFCommentOfIntLitIdentifierVarArrayConstraintPredicateSolveMaximizeMinimizeBoolTypeIntTypeFloatTypeSetRangeColonSetStartSetEndArrayStartArrayEndTupleStartTupleEndCommaAnnStartAssignBoolLitFloatLitStringLitSatisfyEOI"

var _Type_index = [...]uint8{0, 5, 8, 15, 17, 23, 33, 36, 41, 51, 60, 65, 73, 81, 89, 96, 105, 108, 113, 118, 126, 132, 142, 150, 160, 168, 173, 181, 187, 194, 202, 211, 218, 221}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
